1. 电话拦截
这个功能大家可能都知道了，就是利用反射原理调用ITelephony的隐藏方法来实现。这个就不说了，在附件的代码里有。

2.拦截后提示忙音/空号/已关机/已停机
这个功能其实是要用到MMI指令，具体如何设置呼叫转移的指定可以参考这里 http://baike.baidu.com/view/206402.html?fromTaglist 。
在本文中我们会用到“遇忙转移”转移的功能。中国移动的设置方式是 **67#电话号码#，取消方式为 ##67#。”无条件转移“用21代替67即可。这两个指令可以直接在手机的拨号界面输入并拨号测试。ITelephony的endcall方法挂断电话后，会提示电话忙。如果事前设置好了忙时转移到一个空号/已关机/已停机的电话号码，就会提示您拨的电话号码是空号/已关机/已停机。
其实大家可以下载 xxx卫士看下，它设置来电拒接模式后，都是会启动设置MMI指令的界面。然后再去“设置》通话设置》来电转接”，看看 “占线时转接” 设置好的电话号码，就可以知道空号/已关机/已停机对应的电话号码是什么了。

附件是演示工程文件，有几点要说明下：
1. 修改一下BLOCKED_NUMBER这个变量值，把它设置为你要测试拦截的电话号码。
2. 全部功能是在一个Activity里实现的，所以大家要先运行这个Activity，然后点击“设置呼叫转移”，设置好呼叫转移后，不要关闭这个Activity，关了就拦截不了电话了。有心的朋友可以自己去写一个Service在后台运行拦截功能。
实现方式1：
代码如下：

package net.toeach.android.callforwarding;

import java.lang.reflect.Method;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.AudioManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.RemoteException;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;

import com.android.internal.telephony.ITelephony;

/**
 * 演示如何设置呼叫转移，拦截电话（拦截后提示为空号）的例子
 * @author Tony from ToEach.
 * @email wan1976@21cn.com
 */
public class MainActivity extends Activity {
 private static final String TAG = MainActivity.class.getSimpleName();
  
 private final static int OP_REGISTER = 100;
 private final static int OP_CANCEL = 200;
 
 private final static String BLOCKED_NUMBER = "1892501xxxx";//要拦截的号码
 //占线时转移，这里13800000000是空号，所以会提示所拨的号码为空号
    private final String ENABLE_SERVICE = "tel:**67*13800000000%23";
    //占线时转移
    private final String DISABLE_SERVICE = "tel:%23%2367%23";

 private IncomingCallReceiver mReceiver;
    private ITelephony iTelephony;
    private AudioManager mAudioManager;
 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
       
        findViewById(R.id.btnEnable).setOnClickListener(new OnClickListener(){
   public void onClick(View v) {
          //设置呼叫转移
          Message message = mHandler.obtainMessage();
    message.what = OP_REGISTER;
    mHandler.dispatchMessage(message);
   }
        });
       
        findViewById(R.id.btnDisable).setOnClickListener(new OnClickListener(){
   public void onClick(View v) {
    //取消呼叫转移
             Message message = mHandler.obtainMessage();
       message.what = OP_CANCEL;
       mHandler.dispatchMessage(message);
   }
        });
       
        mReceiver = new IncomingCallReceiver();
  IntentFilter filter = new IntentFilter("android.intent.action.PHONE_STATE");    
        registerReceiver(mReceiver, filter);// 注册BroadcastReceiver 
       
        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
       
        //利用反射获取隐藏的endcall方法
        TelephonyManager telephonyMgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
  try {
   Method getITelephonyMethod = TelephonyManager.class.getDeclaredMethod("getITelephony", (Class[]) null);
   getITelephonyMethod.setAccessible(true);
   iTelephony = (ITelephony) getITelephonyMethod.invoke(telephonyMgr, (Object[]) null);
     } catch (Exception e) {
      e.printStackTrace();
     }
    }
   
    private Handler mHandler = new Handler() {
  public void handleMessage(Message response) {
      int what = response.what;
      switch(what) {
       case OP_REGISTER:{
        Intent i = new Intent(Intent.ACTION_CALL);
              i.setData(Uri.parse(ENABLE_SERVICE));
              startActivity(i);
        break;
       }
       case OP_CANCEL:{
        Intent i = new Intent(Intent.ACTION_CALL);
              i.setData(Uri.parse(DISABLE_SERVICE));
              startActivity(i);
        break;
       }
      }
  }
 };
 
 private class IncomingCallReceiver extends BroadcastReceiver{
  @Override
  public void onReceive(Context context, Intent intent) {
   String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);
         Log.i(TAG, "State: "+ state);
        
   String number = intent.getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER);
         Log.d(TAG, "Incomng Number: " + number);
        
         if(state.equalsIgnoreCase(TelephonyManager.EXTRA_STATE_RINGING)){//电话正在响铃          
          if(number.equals(BLOCKED_NUMBER)){//拦截指定的电话号码
           //先静音处理
           mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT);
           Log.d(TAG, "Turn ringtone silent");
           
           try {
            //挂断电话
      iTelephony.endCall();
     } catch (RemoteException e) {
      e.printStackTrace();
     }
     
     //再恢复正常铃声
                 mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL);
          }
         }
  }
 }
} 

AndroidManifest.xml如下：

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android "
      package="net.toeach.android.callforwarding"
      android:versionCode="1"
      android:versionName="1.0">
    <application android:icon="@drawable/icon" android:label="@string/app_name">
        <activity android:name=".MainActivity"
                  android:label="@string/app_name">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>
    <uses-sdk android:minSdkVersion="8" />
   
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    <uses-permission android:name="android.permission.CALL_PHONE"/>
</manifest> 

实现方式2: 代码如下：

1，建立包android.refuseCalling , refuseCalling.java代码如下：

package android.refuseCalling;

import android.app.Activity;
import android.net.Uri;
import android.os.Bundle;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import android.content.Context;
import android.content.Intent;
import android.os.RemoteException;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.widget.TextView;
import com.android.internal.telephony.ITelephony;

public class refuseCalling extends Activity {

    private static final String TAG = "Telephony";
    private TextView view = null;
    private TelephonyManager tManager = null;
    private ITelephony iTelephony  = null;
    
     //占线时转移，提示所拨的号码为空号
    private final String ENABLE_SERVICE = "tel:**67*13800000000%23";
     //占线时转移，提示所拨的号码为关机
    private final String ENABLE_POWEROFF_SERVICE = "tel:**67*13810538911%23";
    //占线时转移，提示所拨的号码为停机
    private final String ENABLE_STOP_SERVICE = "tel:**21*13701110216%23";
    
    //占线时转移
    private final String DISABLE_SERVICE = "tel:%23%2321%23";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        //打开监听电话功能
        TelephonyManager mTelephonyMgr = (TelephonyManager) this
                .getSystemService(Context.TELEPHONY_SERVICE);
        mTelephonyMgr.listen(new TeleListener(),
                PhoneStateListener.LISTEN_CALL_STATE);
        
        //gui
        view = new TextView(this);
        view.setText("listen the state of phone\n");
        setContentView(view);
        
        tManager = (TelephonyManager)this.getSystemService(Context.TELEPHONY_SERVICE);
        //初始化iTelephony
        Class <TelephonyManager> c = TelephonyManager.class;
        Method getITelephonyMethod = null;
        try {
        getITelephonyMethod = c.getDeclaredMethod("getITelephony", (Class[])null);
        getITelephonyMethod.setAccessible(true);
        } catch (SecurityException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        } catch (NoSuchMethodException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }

        try {
        iTelephony = (ITelephony) getITelephonyMethod.invoke(tManager, (Object[])null);
        } catch (IllegalArgumentException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        } catch (IllegalAccessException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        } catch (InvocationTargetException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        }
        
        //启用空号提示
        Intent i = new Intent(Intent.ACTION_CALL);
        i.setData(Uri.parse(ENABLE_STOP_SERVICE));
        startActivity(i);
        Log.v(TAG, "启用空号提示");
    }

    class TeleListener extends PhoneStateListener {

        @Override
        public void onCallStateChanged(int state, String incomingNumber) {
            super.onCallStateChanged(state, incomingNumber);
            switch (state) {
            case TelephonyManager.CALL_STATE_IDLE: {
                Log.e(TAG, "CALL_STATE_IDLE");
                view.append("CALL_STATE_IDLE " + "\n");
                break;
            }
            case TelephonyManager.CALL_STATE_OFFHOOK: {
                Log.e(TAG, "CALL_STATE_OFFHOOK");
                view.append("CALL_STATE_OFFHOOK" + "\n");
                break;
            }
            case TelephonyManager.CALL_STATE_RINGING: {
                Log.e(TAG, "CALL_STATE_RINGING");
                view.append("CALL_STATE_RINGING" + "\n");
                try {
                    iTelephony.endCall();                    
                } catch (RemoteException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }                
                break;
            }
            default:
                break;
            }
        }
    }
    protected void onStop() {
        super.onStop();
        }
    protected void onDestroy() {
        super.onDestroy();
        finish();
        Intent i = new Intent(Intent.ACTION_CALL);
        i.setData(Uri.parse(DISABLE_SERVICE));
        startActivity(i);
        }
}s